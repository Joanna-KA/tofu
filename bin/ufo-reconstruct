#!/usr/bin/env python

import os
import sys
import re
import argparse
import numpy as np
from gi.repository import Ufo


def is_format_specifier(path):
    return re.search(r"%[0-9]+i", path)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--axis', type=float, default=1000.0,
                        help="Axis position")
    parser.add_argument('-s', '--angle-step', type=float, default=None,
                        help="Angle step between projections")
    parser.add_argument('-o', '--output', type=str, default='.', metavar='PATH',
                        help="Path to location or format-specified file path"
                             "for storing reconstructed slices")
    parser.add_argument('-i', '--input', type=str, default='.', metavar='PATH',
                        help="Location with sinograms")
    
    parser.add_argument('--first-slice', type=int, default=None, metavar='N',
                        help="First slice")
    parser.add_argument('--last-slice', type=int, default=None, metavar='N',
                        help="Last slice")
    parser.add_argument('--include', type=str, nargs='*', default=None, metavar='PATH',
                        help="Paths to search for plugins and kernel files")
    parser.add_argument('--server', type=str, nargs='*', default=[], metavar='ADDR',
                        help="ZeroMQ addresses of machines on which `ufod' is running")

    args = parser.parse_args()
    cargs = {}

    if args.include:
        config = Ufo.Config(paths=args.include)
        cargs['config'] = config

    # create nodes
    pm = Ufo.PluginManager(**cargs)
    reader = pm.get_task('reader')
    writer = pm.get_task('writer')
    fft = pm.get_task('fft')
    ifft = pm.get_task('ifft')
    fltr = pm.get_task('filter')
    bp = pm.get_task('backproject')

    # configure nodes
    reader.props.path = args.input

    if args.first_slice:
        reader.props.nth = args.first_slice

        if args.last_slice:
            reader.props.count = args.last_slice - args.first_slice

    abs_path = os.path.abspath(args.output)

    if is_format_specifier(args.output):
        outname = abs_path
    else:
        outname = os.path.join(abs_path, 'slice-%05i.tif')

    writer.set_properties(filename=outname)
    fft.set_properties(dimensions=1)
    ifft.set_properties(dimensions=1)
    bp.set_properties(axis_pos=args.axis)

    if args.angle_step:
        bp.set_properties(angle_step=args.angle_step)

    g = Ufo.TaskGraph()

    # backproject filtered sinograms
    g.connect_nodes(reader, fft)
    g.connect_nodes(fft, fltr)
    g.connect_nodes(fltr, ifft)
    g.connect_nodes(ifft, bp)
    g.connect_nodes(bp, writer)

    sched = Ufo.Scheduler()
    sched.run(g)


# vim: ft=python
