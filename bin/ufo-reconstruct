#!/usr/bin/env python

import os
import sys
import re
import glob
import argparse
import logging
import numpy as np
from gi.repository import Ufo
from unfoog import config


LOG = logging.getLogger(__name__)



def init(args, params):
    if not os.path.exists(config.NAME):
        config.write()
    else:
        sys.exit("{0} already exists".format(config.NAME))


def run_tomo(args, params):
    from unfoog import reco
    params.update(args)
    reco.tomo(params)


def run_lamino(args, params):
    from unfoog import reco
    params.update(args)
    reco.lamino(params)


def gui(args, params):
    from unfoog import gui
    params.update(args)
    gui.main(params)


def estimate(args, cfg_parser):
    from unfoog import reco
    sinos = sorted(glob.glob(os.path.join(args.input, '*.tif')))

    if not sinos:
        sys.exit("No valid input")

    middle = sinos[len(sinos) / 2]
    center = reco.estimate_center(cfg_parser, middle, args.num_iterations)
    print(">>> Best axis of rotation: {}".format(center))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='store_true',
                        help="Verbose output")

    subparsers = parser.add_subparsers(title="Commands", metavar='')

    # init parser
    cmd_parser = subparsers.add_parser('init', help="Create a configuration file")
    cmd_parser.set_defaults(func=init, params=None)

    # tomo parser
    tomo_params = config.TomoParams()
    cmd_parser = subparsers.add_parser('tomo', help="Run tomographic reconstruction")
    cmd_parser = tomo_params.add_arguments(cmd_parser)
    cmd_parser.set_defaults(func=run_tomo, params=tomo_params)

    # gui parser
    cmd_parser = subparsers.add_parser('gui', help="GUI for tomographic reconstruction")
    cmd_parser.set_defaults(func=gui, params=tomo_params)

    # lamino parser
    lamino_params = config.LaminoParams()
    cmd_parser = subparsers.add_parser('lamino', help="Run laminographic reconstruction")
    cmd_parser = lamino_params.add_arguments(cmd_parser)
    cmd_parser.set_defaults(func=run_lamino, params=lamino_params)

    # estimate parser
    cmd_parser = subparsers.add_parser('estimate',
                                       help="Estimate center of rotation")

    cmd_parser.set_defaults(func=estimate, params=None)

    cmd_parser.add_argument('--num-iterations', type=int, default=10, metavar='N',
                            help="Number of iterations")

    # parse args and update parameter structures
    args = parser.parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.INFO)

    args.func(args, args.params)


if __name__ == '__main__':
    main()

# vim: ft=python
