#!/usr/bin/env python

import os
import sys
import re
import argparse
import numpy as np
import ConfigParser as configparser
from gi.repository import Ufo


CONFIG_NAME = 'reco.conf'
CONFIG_TEMPLATE = """[general]
#axis = 0.0
#angle_step = 0.0
#input = path/to/sinograms
#output = path/to/output
"""


def get_output_name(output_path):
    abs_path = os.path.abspath(output_path)

    if re.search(r"%[0-9]+i", output_path):
        return abs_path

    return os.path.join(abs_path, 'slice-%05i.tif')


def init(args):
    if not os.path.exists(CONFIG_NAME):
        with open(CONFIG_NAME, 'w') as f:
            f.write(CONFIG_TEMPLATE)
    else:
        sys.exit("{0} already exists".format(CONFIG_NAME))


def run(args):
    cargs = {}

    if args.include:
        config = Ufo.Config(paths=args.include)
        cargs['config'] = config

    # Create reader and writer
    pm = Ufo.PluginManager(**cargs)

    def get_task(name, **kwargs):
        task = pm.get_task(name)
        task.set_properties(**kwargs)
        return task

    reader = get_task('reader', path=args.input)

    if args.first_slice:
        reader.props.nth = args.first_slice

        if args.last_slice:
            reader.props.count = args.last_slice - args.first_slice

    if args.dry_run:
        writer = get_task('null')
    else:
        outname = get_output_name(args.output)
        writer = get_task('writer', filename=outname)


    # Setup graph depending on the chosen method
    g = Ufo.TaskGraph()

    if args.method == 'fbp':
        fft = get_task('fft', dimensions=1)
        ifft = get_task('ifft', dimensions=1)
        fltr = get_task('filter')
        bp = get_task('backproject')

        if args.axis:
            bp.props.axis_pos = args.axis

        if args.angle_step:
            bp.props.angle_step = args.angle_step

        g.connect_nodes(reader, fft)
        g.connect_nodes(fft, fltr)
        g.connect_nodes(fltr, ifft)
        g.connect_nodes(ifft, bp)
        g.connect_nodes(bp, writer)

    if args.method == 'sart':
        art = get_task('art',
                       method='sart',
                       projector='joseph',
                       regularizer='tv',
                       angle_step=args.angle_step,
                       max_iterations=5,
                       max_regularizer_iterations=20,
                       posc=False)

        g.connect_nodes(reader, art)
        g.connect_nodes(art, writer)

    if args.method == 'dfi':
        cut = get_task('cut-sinogram', center_of_rotation=args.axis)
        pad = get_task('zeropadding', oversampling=1)
        fft = get_task('fft', dimensions=1, auto_zeropadding=0)
        dfi = get_task('dfi-sinc')
        ifft = get_task('ifft', dimensions=2)
        swap_forward = get_task('swap-quadrants')
        swap_backward = get_task('swap-quadrants')

        g.connect_nodes(reader, cut)
        g.connect_nodes(cut, pad)
        g.connect_nodes(pad, fft)
        g.connect_nodes(fft, dfi)
        g.connect_nodes(dfi, swap_forward)
        g.connect_nodes(swap_forward, ifft)
        g.connect_nodes(ifft, swap_backward)
        g.connect_nodes(swap_backward, writer)


    sched = Ufo.Scheduler()
    sched.run(g)


if __name__ == '__main__':
    # Read configuration first and use any set values as default for the
    # argument parser
    cfg_parser = configparser.ConfigParser()
    cfg_parser.read([CONFIG_NAME])

    def get_config(section, option, default=None):
        try:
            return cfg_parser.get(section, option)
        except (configparser.NoOptionError, configparser.NoSectionError):
            return default


    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers(title="Commands", metavar='')

    # init parser
    cmd_parser = subparsers.add_parser('init', help="Create a configuration file")
    cmd_parser.set_defaults(func=init)

    # run parser
    cmd_parser = subparsers.add_parser('run', help="Run reconstruction")
    cmd_parser.set_defaults(func=run)

    cmd_parser.add_argument('-a', '--axis', type=float,
                            default=get_config('general', 'axis'),
                            help="Axis position")
    cmd_parser.add_argument('-s', '--angle-step', type=float,
                            default=get_config('general', 'angle_step'),
                            help="Angle step between projections")
    cmd_parser.add_argument('-o', '--output', type=str,
                            default=get_config('general', 'output', '.'),
                            metavar='PATH',
                            help="Path to location or format-specified file path "
                                 "for storing reconstructed slices")
    cmd_parser.add_argument('-i', '--input', type=str,
                            default=get_config('general', 'input', '.'),
                            metavar='PATH',
                            help="Location with sinograms")

    cmd_parser.add_argument('--method', choices=['fbp', 'sart', 'dfi'],
                            default='fbp',
                            help="Reconstruction method")
    cmd_parser.add_argument('--first-slice', type=int, default=None, metavar='N',
                            help="First slice")
    cmd_parser.add_argument('--last-slice', type=int, default=None, metavar='N',
                            help="Last slice")
    cmd_parser.add_argument('--include', type=str, nargs='*', default=None, metavar='PATH',
                            help="Paths to search for plugins and kernel files")
    cmd_parser.add_argument('--server', type=str, nargs='*', default=[], metavar='ADDR',
                            help="ZeroMQ addresses of machines on which `ufod' is running")
    cmd_parser.add_argument('--dry-run', action='store_true', default=False,
                            help="Reconstruct without writing data")


    args = parser.parse_args()
    args.func(args)


# vim: ft=python
