#!/usr/bin/env python

import argparse
import time
import math
from gi.repository import Ufo, GLib


def reco(width, height, num_projections):
    pm = Ufo.PluginManager()

    generate = pm.get_task('generate')
    fft = pm.get_task('fft')
    ifft = pm.get_task('ifft')
    fltr = pm.get_task('filter')
    bp = pm.get_task('backproject')
    null = pm.get_task('null')

    generate.set_properties(number=height, width=width, height=num_projections)
    bp.set_properties(axis_pos=width / 2, angle_step=math.pi / num_projections)
    fft.set_properties(dimensions=1)
    ifft.set_properties(dimensions=1)

    g = Ufo.TaskGraph()
    g.connect_nodes(generate, fft)
    g.connect_nodes(fft, fltr)
    g.connect_nodes(fltr, ifft)
    g.connect_nodes(ifft, bp)
    g.connect_nodes(bp, null)

    scheduler = Ufo.Scheduler()
    scheduler.run(g)

    return scheduler.props.time


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('--width', type=int, default=1024,
                        help="Width of a generated projection")

    parser.add_argument('--height', type=int, default=1024,
                        help="Height of a generated projection")

    parser.add_argument('--num-projections', type=int, default=512,
                        help="Number of projections")

    parser.add_argument('--num-runs', type=int, default=3,
                        help="Number of runs")

    args = parser.parse_args()

    exec_times = []
    total_times = []

    for i in range(args.num_runs):
        start = time.time()
        exec_times.append(reco(args.width, args.height, args.num_projections))
        total_times.append(time.time() - start)

    exec_time = sum(exec_times) / len(exec_times)
    total_time = sum(total_times) / len(total_times)
    overhead = (total_time / exec_time - 1.0) * 100
    bandwidth = args.width * args.height * args.num_projections * 4 / exec_time / 1024. / 1024.

    msg = "width={} height={} n_proj={} exec={:.4f}s total={:.4f}s overhead={:.2f}% bandwidth={:2f}MB/s"

    print(msg.format(args.width, args.height, args.num_projections,
                     exec_time, total_time, overhead, bandwidth))


if __name__ == '__main__':
    main()
