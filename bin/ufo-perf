#!/usr/bin/env python

import os
import sys
import argparse
import time
import math
from gi.repository import Ufo, GLib


def reco(width, height, num_projections):
    pm = Ufo.PluginManager()

    generate = pm.get_task('generate')
    fft = pm.get_task('fft')
    ifft = pm.get_task('ifft')
    fltr = pm.get_task('filter')
    bp = pm.get_task('backproject')
    null = pm.get_task('null')

    generate.set_properties(number=height, width=width, height=num_projections)
    bp.set_properties(axis_pos=width / 2, angle_step=math.pi / num_projections)
    fft.set_properties(dimensions=1)
    ifft.set_properties(dimensions=1)

    g = Ufo.TaskGraph()
    g.connect_nodes(generate, fft)
    g.connect_nodes(fft, fltr)
    g.connect_nodes(fltr, ifft)
    g.connect_nodes(ifft, bp)
    g.connect_nodes(bp, null)

    scheduler = Ufo.Scheduler()
    scheduler.run(g)

    return scheduler.props.time


def measure(width, height, num_projections, num_runs, output):
    exec_times = []
    total_times = []

    for i in range(num_runs):
        start = time.time()
        exec_times.append(reco(width, height, num_projections))
        total_times.append(time.time() - start)

    exec_time = sum(exec_times) / len(exec_times)
    total_time = sum(total_times) / len(total_times)
    overhead = (total_time / exec_time - 1.0) * 100
    bandwidth = width * height * num_projections * 4 / exec_time / 1024. / 1024.

    msg = "width={:<6d} height={:<6d} n_proj={:<6d} exec={:.4f}s  total={:.4f}s  overhead={:.2f}%  bandwidth={:.2f}MB/s\n"
    output.write(msg.format(width, height, num_projections,
                            exec_time, total_time, overhead, bandwidth))
    output.flush()


def range_from(s):
    """
    Split *s* separated by ':' into int triple, filling missing values with 1s.
    """
    lst = [int(x) for x in s.split(':')]

    if len(lst) == 1:
        frm = lst[0]
        return (frm, frm + 1, 1)

    if len(lst) == 2:
        return (lst[0], lst[1], 1)

    if len(lst) == 3:
        return (lst[0], lst[1], lst[2])

    raise ValueError("Cannot parse {}".format(s))


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('--width', type=str, default='1024',
                        help="Width or range of width of a generated projection")

    parser.add_argument('--height', type=str, default='1024',
                        help="Height or range of height of a generated projection")

    parser.add_argument('--num-projections', type=str, default='512',
                        help="Number or range of number of projections")

    parser.add_argument('--num-runs', type=int, default=3,
                        help="Number of runs")

    parser.add_argument('--nv-devices', type=str, default=None,
                        help="Range of devices to be scanned over")

    parser.add_argument('-o', '--output', type=str,
                        help="Output file for results")

    args = parser.parse_args()
    output = sys.stdout if not args.output else open(args.output, 'w')

    if args.nv_devices:
        var = ','.join(str(n) for n in range(*range_from(args.nv_devices)))
        os.environ['CUDA_VISIBLE_DEVICES'] = var

    for width in range(*range_from(args.width)):
        for height in range(*range_from(args.height)):
            for num_projections in range(*range_from(args.num_projections)):
                measure(width, height, num_projections, args.num_runs, output)


if __name__ == '__main__':
    main()
